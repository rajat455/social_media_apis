generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id @unique @default(uuid())
  first_name   String         @db.VarChar(50)
  last_name    String         @db.VarChar(50)
  email        String         @unique @db.VarChar(100)
  phone        String?        @db.VarChar(10)
  password     String?        @db.Text
  username     String         @db.VarChar(100)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  files        files[]
  otp          otp[]
  connection   connection[]
  group        group[]
  group_people group_people[]
  feeds        feeds[]
}

model otp {
  id         String   @id @unique @default(uuid())
  user       user     @relation(fields: [userid], references: [id])
  userid     String
  otp        String   @db.Text
  email      String   @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([userid], map: "otp_userid_fkey")
}

model files {
  id          String        @id @unique @default(uuid())
  uploaded_by user          @relation(fields: [userid], references: [id])
  userid      String
  name        String        @db.VarChar(20)
  path        String        @db.VarChar(150)
  mimtype     String        @db.VarChar(50)
  extantion   String        @db.VarChar(10)
  purpose     files_purpose @default(media)
  size        BigInt
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime      @default(now()) @db.Timestamp(0)
  group       group[]
  feeds       feeds[]

  @@index([userid], map: "files_userid_fkey")
}

enum files_purpose {
  media
  send
}

model connection {
  id            String          @id @unique @default(uuid())
  requested_by  String          @db.VarChar(100)
  accepted_user user            @relation(fields: [accepted_by], references: [id])
  accepted_by   String          @db.VarChar(100)
  con_status    connection_type @default(pending)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)

  @@unique([requested_by, accepted_by])
}

enum connection_type {
  pending
  accept
  block
}

model group {
  id           String         @id @unique @default(uuid())
  name         String
  admin        user           @relation(fields: [created_by], references: [id])
  created_by   String
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  icon         files?         @relation(fields: [iconid], references: [id])
  iconid       String?
  group_people group_people[]
}

model group_people {
  id         String   @id @unique @default(uuid())
  user       user     @relation(fields: [joined_by], references: [id])
  joined_by  String   @db.VarChar(100)
  invited_by String
  is_joined  Boolean  @default(true)
  is_admin   Boolean  @default(false)
  group      group    @relation(fields: [groupid], references: [id])
  groupid    String   @db.VarChar(100)
  joined_at  DateTime @default(now()) @db.Timestamp(0)
  lefted_at  DateTime @default(now()) @db.Timestamp(0)

  @@unique([joined_by, groupid])
}

model feeds {
  id        String   @id @unique @default(uuid())
  tital     String?  @db.VarChar(100)
  desc      String?  @db.Text
  user      user     @relation(fields: [posted_by], references: [id])
  posted_by String
  file      files?   @relation(fields: [fileid], references: [id])
  fileid   String? @unique
  posted_at DateTime @default(now()) @db.Timestamp(0)
}
